// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Health profile
  height        Float?
  weight        Float?
  age           Int?
  gender        String?
  dailyCalorieGoal Int?
  goalType      String?   // "weight_loss", "weight_gain", "maintain"
  activityLevel String?   // "sedentary", "light", "moderate", "active", "very_active"
  notificationSettings String?  // JSON string for notification preferences
  
  accounts     Account[]
  sessions     Session[]
  goals        Goal[]
  foodRecords  FoodRecord[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Goal {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?
  reason      String?  // Why user wants to achieve this goal
  targetDate  DateTime? @map("target_date")
  beforeImage String?  @map("before_image")
  afterImage  String?  @map("after_image")
  reward      String?  // What user will reward themselves with
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model FoodRecord {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  imageUrl      String?  @map("image_url")
  totalCalories Float    @map("total_calories")
  totalProtein  Float    @map("total_protein")
  totalCarbs    Float    @map("total_carbs")
  totalFat      Float    @map("total_fat")
  totalFiber    Float    @map("total_fiber")
  totalSugar    Float    @map("total_sugar")
  totalSodium   Float    @map("total_sodium")
  foods         String   // JSON string of FoodItem[]
  recordedAt    DateTime @default(now()) @map("recorded_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("food_records")
}
